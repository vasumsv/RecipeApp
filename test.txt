@Test
void insertPaymentLines_BackOfficeException_CoversTargetLines() {
    // 1. Setup payment data with valid fields
    PaymentLinesFeoModel paymentLine = new PaymentLinesFeoModel();
    paymentLine.setInvoiceReference("INV123");
    paymentLine.setAmount(new BigDecimal("1000.00"));
    paymentLine.setProviderId("PROV123");
    paymentLine.setEntityBdrId("123"); // Must match entity filter
    List<PaymentLinesFeoModel> finalData = Collections.singletonList(paymentLine);

    // 2. Mock invoices & BAPs to pass amount validation
    InvoicePayableModel invoice = new InvoicePayableModel();
    invoice.setInvoiceReference("INV123");
    invoice.setAmount(new BigDecimal("1000.00")); // Match payment amount
    when(invoiceServiceApi.getListOfInvoices(anyList()))
        .thenReturn(Collections.singletonList(invoice));

    BapPayableModel bap = new BapPayableModel();
    bap.setInvoiceReference("INV123");
    bap.setBapAmount(new BigDecimal("1000.00")); // Match invoice amount
    when(invoiceServiceApi.getListOfBapDetailsForMultipleInvoices(anyList()))
        .thenReturn(Collections.singletonList(bap));

    // 3. Mock provider details
    when(referentialServiceApi.getProviderDetails(anyString(), anyString()))
        .thenReturn(new ProviderDetails());

    // 4. Mock user details with REQUIRED FIELD (codgrePabbo)
    UserDetailsModel userDetails = new UserDetailsModel();
    userDetails.setCodgrePabbo("PABBO123"); // Critical for backoffice call
    when(referentialServiceApi.getUserInitials(anyString())).thenReturn(userDetails);

    // 5. Mock entity list with matching bdrId
    EntityListModel entity = new EntityListModel();
    entity.setBdrId(new BigInteger("123")); // Must match paymentLine.getEntityBdrId()
    entity.setEntityCode("ENTITY_CODE"); // Required for getBackOfficeDetails
    when(referentialServiceApi.getEntireListOfEntities()) // Exact method name
        .thenReturn(Collections.singletonList(entity));

    // 6. Force exception in getBackOfficeDetails
    when(referentialServiceApi.getBackOfficeDetails(
        eq("ENTITY_CODE"), // Matches entity.getEntityCode()
        eq("PABBO123")     // Matches userDetails.getCodgrePabbo()
    )).thenThrow(new RuntimeException("Test Exception"));

    // 7. Execute
    InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(finalData, "user1");

    // 8. Verify target lines (1191-1198)
    assertEquals("WESSAGE", response.getStatus());
    assertTrue(response.getErrorMessage().contains("Test Exception"));
}