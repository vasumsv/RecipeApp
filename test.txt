@Test
void insertPaymentLines_BackOfficeException_CoversTargetLines() {
    // Setup valid payment data
    PaymentLinesFeoModel paymentLine = new PaymentLinesFeoModel();
    paymentLine.setInvoiceReference("INV123");
    paymentLine.setAmount(new BigDecimal("1000.00"));
    paymentLine.setProviderId("PROV123");
    paymentLine.setEntityBdrId("123"); // Must match entity filter
    List<PaymentLinesFeoModel> finalData = Collections.singletonList(paymentLine);

    // Mock invoices & BAPs with matching amounts
    InvoicePayableModel invoice = new InvoicePayableModel();
    invoice.setInvoiceReference("INV123");
    invoice.setAmount(new BigDecimal("1000.00")); // Match payment amount
    when(invoiceServiceApi.getListOfInvoices(anyList()))
        .thenReturn(Collections.singletonList(invoice));

    BapPayableModel bap = new BapPayableModel();
    bap.setInvoiceReference("INV123");
    bap.setBapAmount(new BigDecimal("1000.00")); // Match invoice amount
    when(invoiceServiceApi.getListOfBapDetailsForMultipleInvoices(anyList()))
        .thenReturn(Collections.singletonList(bap));

    // Mock provider details
    when(referentialServiceApi.getProviderDetails(anyString(), anyString()))
        .thenReturn(new ProviderDetails());

    // Mock user details with required field
    UserDetailsModel userDetails = new UserDetailsModel();
    userDetails.setCodgrePabbo("PABBO123"); // Critical for backoffice call
    when(referentialServiceApi.getUserInitials(anyString())).thenReturn(userDetails);

    // Mock entity with matching BdrId
    EntityListModel entity = new EntityListModel();
    entity.setBdrId(new BigInteger("123")); // Must match paymentLine.setEntityBdrId("123")
    when(referentialServiceApi.getEntireListOfEntities())) // Match actual method name
        .thenReturn(Collections.singletonList(entity));

    // Force exception in target method
    when(referentialServiceApi.getBackOfficeDetails(
        eq(entity.getEntityCode()), // Ensure entity code is passed
        eq("PABBO123") // Matches userDetails.getCodgrePabbo()
    )).thenThrow(new RuntimeException("Test Exception"));

    // Execute
    InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(finalData, "user1");

    // Verify target lines 1190-1198
    assertEquals("WESSAGE", response.getStatus());
    assertTrue(response.getErrorMessage().contains("Test Exception"));
}