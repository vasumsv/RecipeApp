    @Test
    void transferFile_CoversLines143To155() throws Exception {
        // Setup
        LocalDate date = LocalDate.now();
        CashAllocationModel model1 = new CashAllocationModel();
        model1.setInvoiceMatched("INV001,INV002");
        model1.setInvoiceUnmatched("INV003");
        
        CashAllocationModel model2 = new CashAllocationModel();
        model2.setInvoiceMatched(null);
        model2.setInvoiceUnmatched("INV004");

        List<CashAllocationModel> models = Arrays.asList(model1, model2);

        // Mock directory path
        ReflectionTestUtils.setField(adDomain, "directoryName", "target/test-files");
        ReflectionTestUtils.setField(adDomain, "abftrKey", "TESTKEY");

        // Execute
        String result = adDomain.transferFile(date, models);

        // Verify
        assertNotNull(result);
        assertTrue(result.contains("TESTKEY.ABA_PAID_INVOICES"));
        
        // Verify file operations
        File outputFile = new File("target/test-files/" + result);
        assertTrue(outputFile.exists());
        
        // Verify repository update
        verify(cashAllocationRepositoryApi, times(3)).updateCashAllocationMode(any());
    }

    @Test
    void transferFile_IOException_CoversCatchBlock() throws Exception {
        // Setup
        LocalDate date = LocalDate.now();
        CashAllocationModel model = new CashAllocationModel();
        model.setInvoiceMatched("INV001");

        // Force IOException using invalid characters in filename
        ReflectionTestUtils.setField(adDomain, "directoryName", "/invalid/\0/path");
        
        // Execute
        String result = adDomain.transferFile(date, List.of(model));
        
        // Verify exception handling
        assertNull(result);
    }