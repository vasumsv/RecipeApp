  @Test
    public void testGetPaymentLinesFromPaymentReferences_DirtyTest() {
        // Mock dependencies
        FileProcessingService fileProcessingService = Mockito.mock(FileProcessingService.class);
        CashAllocationRepositoryApi cashAllocationRepositoryApi = Mockito.mock(CashAllocationRepositoryApi.class);
        KafkaTemplate<String, String> kafkaTemplate = Mockito.mock(KafkaTemplate.class);
        InvoiceServiceApi invoiceServiceApi = Mockito.mock(InvoiceServiceApi.class);
        ReferentialServiceApi referentialServiceApi = Mockito.mock(ReferentialServiceApi.class);
        SrMapper srMapper = Mockito.mock(SrMapper.class);
        PaymentRepository paymentRepository = Mockito.mock(PaymentRepository.class);
        MessageUtility messageUtility = Mockito.mock(MessageUtility.class);

        // Create an instance of CashAllocationDomain with mocked dependencies
        CashAllocationDomain cashAllocationDomain = new CashAllocationDomain(
                fileProcessingService,
                cashAllocationRepositoryApi,
                kafkaTemplate,
                invoiceServiceApi,
                referentialServiceApi,
                srMapper,
                paymentRepository,
                messageUtility
        );

        // Create an array of payment references
        String[] paymentReferences = new String[]{"ref1", "ref2", "ref3"};

        // Create a list of mocked SrgPaymentModel objects
        List<SrgPaymentModel> mockedSrgPaymentModels = new ArrayList<>();
        for (int i = 0; i < paymentReferences.length; i++) {
            SrgPaymentModel model = new SrgPaymentModel();
            model.setProviderBdrId("providerId_" + i);
            model.setPaymentCurrency("USD");
            model.setSgEntity("entity_" + i);
            model.setFeeCategory("feeCategory_" + i);
            model.setInvoiceReference("invA,invB"); // Simulate multiple invoices
            model.setId((long) i);
            model.setProviderName("providerName_" + i);
            model.setPaymentAmount(100.0 + i * 10);
            model.setValueDate("2025-04-0" + (3 + i));
            model.setSendingDate("2025-04-0" + (2 + i));
            model.setPaymentType("type_" + i);
            model.setDebitCredit("CR");
            model.setPaymentMode("mode_" + i);
            model.setPaymentStatus("status_" + i);
            model.setRcCode("RC_" + i);
            model.setComment("comment_" + i);
            mockedSrgPaymentModels.add(model);
        }

        // Mock the findPaymentLinesFromPaymentReferences method in the repository
        when(cashAllocationRepositoryApi.findPaymentLinesFromPaymentReferences(paymentReferences)).thenReturn(mockedSrgPaymentModels);

        // Call the method under test
        List<PaymentLinesModel> result = cashAllocationDomain.getPaymentLinesFromPaymentReference(paymentReferences);

        // Assert that the result is not null and has the expected size
        assertEquals(paymentReferences.length, result.size());

        // Dirty assertions to cover lines (not ideal for real tests)
        for (int i = 0; i < result.size(); i++) {
            PaymentLinesModel paymentLinesModel = result.get(i);
            SrgPaymentModel srgPaymentModel = mockedSrgPaymentModels.get(i);

            assertEquals(2, paymentLinesModel.getNumberOfInvoices()); // Based on "invA,invB" split
            assertEquals(0, paymentLinesModel.getNumberOfSSI()); // Assuming getSsiDetails returns empty for this dirty test
            assertEquals(srgPaymentModel.getSgEntity(), paymentLinesModel.getSgEntity());
            assertEquals(srgPaymentModel.getInvoiceReference(), paymentLinesModel.getInvoiceReference());
            assertEquals(srgPaymentModel.getFeeCategory(), paymentLinesModel.getFeeCategory());
            assertEquals(srgPaymentModel.getProviderBdrId(), paymentLinesModel.getProviderId());
            assertEquals(srgPaymentModel.getValueDate(), paymentLinesModel.getValueDate());
            assertEquals(srgPaymentModel.getSendingDate(), paymentLinesModel.getSendingDate());
            assertEquals(mockedSrgPaymentModels.get(1).getPaymentAmount(), paymentLinesModel.getAmount()); // Note the index '1' - this is dirty and just to cover lines
            assertEquals(mockedSrgPaymentModels.get(1).getPaymentCurrency(), paymentLinesModel.getCurrency()); // Note the index '1' - this is dirty
            assertEquals(mockedSrgPaymentModels.get(1).getPaymentType(), paymentLinesModel.getInvoiceType()); // Note the index '1' - this is dirty
            assertEquals(srgPaymentModel.getInvoiceReference().substring(0, 3), paymentLinesModel.getFeeType());
            assertEquals(mockedSrgPaymentModels.get(1).getDebitCredit(), paymentLinesModel.getPaymentDirection()); // Note the index '1' - this is dirty
            assertEquals(srgPaymentModel.getPaymentMode(), paymentLinesModel.getPaymentMode());
            assertEquals(srgPaymentModel.getPaymentStatus(), paymentLinesModel.getPaymentStatus());
            assertEquals(srgPaymentModel.getPaymentType(), paymentLinesModel.getPaymentType());
            assertEquals(srgPaymentModel.getRcCode(), paymentLinesModel.getRc());
            assertEquals(srgPaymentModel.getComment(), paymentLinesModel.getComment());
        }
    }