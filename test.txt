 @Test
    void transferFile_CoversLines143To155() throws Exception {
        // Access private method via reflection
        Method transferFileMethod = AbDomain.class.getDeclaredMethod(
            "transferFile", 
            LocalDate.class, 
            List.class
        );
        transferFileMethod.setAccessible(true); // Override access modifier

        // Setup test data
        LocalDate date = LocalDate.now();
        CashAllocationModel model = new CashAllocationModel();
        model.setInvoiceMatched("INV001");
        
        // Inject values via reflection
        ReflectionTestUtils.setField(abDomain, "directoryName", "target/test-files");
        ReflectionTestUtils.setField(abDomain, "abftrKey", "TESTKEY");

        // Invoke private method
        String result = (String) transferFileMethod.invoke(
            abDomain, 
            date, 
            Collections.singletonList(model)
        );

        // Verify results
        assertNotNull(result);
        assertTrue(result.contains("TESTKEY.ABA_PAID_INVOICES"));
    }


    @Test
void transferFile_IOException_CoversCatchBlock() throws Exception {
    Method method = AbDomain.class.getDeclaredMethod("transferFile", LocalDate.class, List.class);
    method.setAccessible(true);

    // Force invalid directory path
    ReflectionTestUtils.setField(abDomain, "directoryName", "/invalid/\0/path");
    
    // Execute with empty list to trigger file operation
    String result = (String) method.invoke(abDomain, LocalDate.now(), Collections.emptyList());
    
    // Verify error handling
    assertNull(result); // Or check logs
}