@Test
    public void testUpdatePaymentLines_LineCoverage_1474_1515() {
        // Mock dependencies
        CashAllocationRepositoryApi cashAllocationRepositoryApi = Mockito.mock(CashAllocationRepositoryApi.class);
        ReferentialServiceApi referentialServiceApi = Mockito.mock(ReferentialServiceApi.class);
        SrMapper srMapper = Mockito.mock(SrMapper.class);
        InvoiceServiceApi invoiceServiceApi = Mockito.mock(InvoiceServiceApi.class);
        ReferentialServiceApi.UserDetails userDetails = Mockito.mock(ReferentialServiceApi.UserDetails.class);
        ReferentialServiceApi.AccountDetails accounts = Mockito.mock(ReferentialServiceApi.AccountDetails.class);
        ReferentialServiceApi.PaymentCheckResponse paymentCheckResponse = Mockito.mock(ReferentialServiceApi.PaymentCheckResponse.class);
        ReferentialServiceApi.ListSslDetails listSslDetails = Mockito.mock(ReferentialServiceApi.ListSslDetails.class);
        ReferentialServiceApi.ListCallSalesResponse listCallSalesResponse = Mockito.mock(ReferentialServiceApi.ListCallSalesResponse.class);
        ReferentialServiceApi.Collectors collectors = Mockito.mock(ReferentialServiceApi.Collectors.class);
        ReferentialServiceApi.ListResponse listResponse = Mockito.mock(ReferentialServiceApi.ListResponse.class);

        // Create an instance of CashAllocationDomain with mocked dependencies
        CashAllocationDomain cashAllocationDomain = new CashAllocationDomain(
                Mockito.mock(FileProcessingService.class),
                cashAllocationRepositoryApi,
                Mockito.mock(KafkaTemplate.class),
                invoiceServiceApi,
                referentialServiceApi,
                srMapper,
                Mockito.mock(PaymentRepository.class),
                Mockito.mock(MessageUtility.class)
        );

        // Input data
        String user = "testUser";
        List<PaymentLineModel> updatePaymentLines = new ArrayList<>();
        PaymentLineModel model = new PaymentLineModel();
        model.setPaymentType("A"); // For the if condition on line 1474
        model.setProviderId("provider1");
        model.setEntity("entity1");
        model.setFeeId("fee1");
        model.setCurrency("USD");
        model.setInvoiceType("type1");
        model.setProviderId("provider1");
        model.setProviderBankName("bank1");
        model.setProviderBankAccNumber("account1");
        model.setProviderBankAccIfscCode("ifsc1");
        model.setProviderBankAccSwiftCode("swift1");
        model.setAccountNumber("account1");
        model.setAmount(100.0);
        model.setSendingDate("2023-10-27");
        model.setValueDate("2023-10-28");
        updatePaymentLines.add(model);

        // Mock repository and service calls
        Mockito.when(referentialServiceApi.getAccountDetailsFromBrmForPayment(Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(accounts);
        Mockito.when(referentialServiceApi.getUserInitials(Mockito.anyString())).thenReturn(userDetails);
        Mockito.when(referentialServiceApi.paymentCheck(Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(paymentCheckResponse);
        Mockito.when(referentialServiceApi.getSslDetails(Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(listSslDetails);
        Mockito.when(referentialServiceApi.getCallSalesDetails(Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(listCallSalesResponse);
        Mockito.when(referentialServiceApi.getCollectors(Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(listResponse);
        Mockito.when(referentialServiceApi.getListSslDetails(Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(listSslDetails);
        Mockito.when(cashAllocationRepositoryApi.updatePaymentEntitiesByPaymentReference(Mockito.any(PaymentEntities.class))).thenReturn(1);
        Mockito.when(cashAllocationRepositoryApi.findPaymentDetailsForInvoice(Mockito.any(PaymentDetailsForInvoice.class))).thenReturn(new ArrayList<>());
        Mockito.when(srMapper.map(Mockito.any(PaymentLineModel.class), Mockito.any(PaymentEntities.class))).thenReturn(new PaymentEntities());
        Mockito.when(srMapper.map(Mockito.any(PaymentLineModel.class), Mockito.any(PaymentDetailsForInvoice.class))).thenReturn(new PaymentDetailsForInvoice());

        // Call the method under test
        List<PaymentLineModel> result = cashAllocationDomain.updatePaymentLines(user, updatePaymentLines);

        // Basic assertion
        assertNotNull(result);
    }