@Test
void insertPaymentLines_CurrencyException_CoversTargetLines() {
    // 1. Setup payment data with CURRENCY FIELD
    PaymentLinesFeoModel paymentLine = new PaymentLinesFeoModel();
    paymentLine.setInvoiceReference("INV123");
    paymentLine.setAmount(new BigDecimal("1000.00"));
    paymentLine.setProviderId("PROV123");
    paymentLine.setEntityBenId("123");
    paymentLine.setCurrency("USD"); // Critical for currency call
    paymentLine.setFeeBdofId("456"); // Required for other mocks
    List<PaymentLinesFeoModel> finalData = Collections.singletonList(paymentLine);

    // 2. Mock invoices & BAPs to pass validations
    InvoicePayableModel invoice = new InvoicePayableModel();
    invoice.setInvoiceReference("INV123");
    invoice.setAmount(new BigDecimal("1000.00"));
    when(invoiceServiceApi.getListOfInvoices(anyList()))
        .thenReturn(Collections.singletonList(invoice));

    BapPayableModel bap = new BapPayableModel();
    bap.setInvoiceReference("INV123");
    bap.setBapAmount(new BigDecimal("1000.00"));
    when(invoiceServiceApi.getListOfBapDetailsForMultipleInvoices(anyList()))
        .thenReturn(Collections.singletonList(bap));

    // 3. Mock provider/user/entity to avoid early exits
    when(referentialServiceApi.getProviderDetails(anyString(), anyString()))
        .thenReturn(new ProviderDetails());

    UserDetailsModel userDetails = new UserDetailsModel();
    userDetails.setCodgcpRabbo("PABBO123");
    when(referentialServiceApi.getUserDetails(anyString())).thenReturn(userDetails);

    EntityListModel entity = new EntityListModel();
    entity.setBenId(new BigInteger("123"));
    when(referentialServiceApi.getEntityListOfEntities()))
        .thenReturn(Collections.singletonList(entity));

    // 4. FORCE EXCEPTION IN CURRENCY DETAILS CALL
    when(referentialServiceApi.getCurrencyDetails(eq("USD"))) 
        .thenThrow(new RuntimeException("Currency Error"));

    // 5. Execute
    InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(finalData, "user1");

    // 6. Verify target lines (1220-1232)
    assertEquals("MESSAGE", response.getStatus());
    assertTrue(response.getErrorMessage().contains("Currency Error"));
}