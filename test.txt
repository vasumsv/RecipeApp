@Given("I have a successfully created invoice")
public void iHaveASuccessfullyCreatedInvoice() throws IOException {
    // Your existing creation logic from line 117
    // This populates responseEntity with the created invoice
    originalInvoice = responseEntity.getBody(); // Store the original invoice
    invoiceReference = originalInvoice.getInvoiceReference();
    logger.info("Created invoice with reference: {}", invoiceReference);
}

@When("I send a PUT request to edit the invoice")
public void iSendAPUTRequestToEditTheInvoice() throws JsonProcessingException {
    String editUrl = baseUrl2 + "/invoices/" + invoiceReference;
    
    // Create a copy of the original invoice to modify
    InvoicePayableModel editedInvoice = new ObjectMapper()
        .readValue(
            new ObjectMapper().writeValueAsString(originalInvoice),
            InvoicePayableModel.class
        );
    
    // Modify specific fields
    editedInvoice.setInvoiceStatus("EDITED");
    editedInvoice.setDescription("Updated description - " + LocalDateTime.now());
    
    editResponseEntity = restTemplate.exchange(
        editUrl,
        HttpMethod.PUT,
        new HttpEntity<>(editedInvoice, header),
        InvoicePayableModel.class
    );
    logger.info("Invoice edit request sent. Status: {}", editResponseEntity.getStatusCode());
}

@Then("the edit response status code should be {int}")
public void theEditResponseStatusCodeShouldBe(int expectedStatusCode) {
    assertEquals(expectedStatusCode, editResponseEntity.getStatusCode().value());
}

@Then("the response should contain updated invoice details")
public void theResponseShouldContainUpdatedInvoiceDetails() {
    InvoicePayableModel updatedInvoice = editResponseEntity.getBody();
    assertNotNull(updatedInvoice);
    
    // Verify updated fields
    assertEquals("EDITED", updatedInvoice.getInvoiceStatus());
    assertTrue(updatedInvoice.getDescription().startsWith("Updated description"));
    
    // Verify unchanged fields
    assertEquals(originalInvoice.getId(), updatedInvoice.getId());
    assertEquals(originalInvoice.getInvoiceReference(), updatedInvoice.getInvoiceReference());
    assertEquals(originalInvoice.getProviderReference(), updatedInvoice.getProviderReference());
    
    logger.info("Successfully edited invoice: {}", updatedInvoice);
}