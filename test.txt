
    @Test
    public void testGetPaymentLinesFromPaymentReferences_LineCoverage() {
        // Mock dependencies
        CashAllocationRepositoryApi cashAllocationRepositoryApi = Mockito.mock(CashAllocationRepositoryApi.class);
        CashAllocationDomain cashAllocationDomain = new CashAllocationDomain(
                Mockito.mock(FileProcessingService.class),
                cashAllocationRepositoryApi,
                Mockito.mock(KafkaTemplate.class),
                Mockito.mock(InvoiceServiceApi.class),
                Mockito.mock(ReferentialServiceApi.class),
                Mockito.mock(SrMapper.class),
                Mockito.mock(PaymentRepository.class),
                Mockito.mock(MessageUtility.class)
        );

        // Create a String array for input
        String[] paymentReferences = new String[]{"reference1", "reference2"};

        // Mock the private findPaymentLinesFromPaymentReferences method
        List<SrgPaymentModel> srgPaymentModels = new ArrayList<>();
        SrgPaymentModel srgModel1 = new SrgPaymentModel();
        srgModel1.setProviderBdrId("provider1");
        srgModel1.setPaymentCurrency("USD");
        srgModel1.setSgEntity("entity1");
        srgModel1.setFeeCategory("category1");
        srgModel1.setInvoiceReference("invoice1,invoice2"); // Multiple invoices for split
        srgModel1.setId("123");
        srgModel1.setProviderName("Provider A");
        srgModel1.setSendingDate("2023-11-01");
        srgModel1.setPaymentAmount(100.0);
        srgModel1.setPaymentType("Type A");
        srgModel1.setDebitCredit("D");
        srgModel1.setPaymentMode("Mode X");
        srgModel1.setPaymentStatus("Processed");
        srgModel1.setRcCode("RC1");
        srgModel1.setComment("Test Comment");
        srgPaymentModels.add(srgModel1);

        Mockito.when(Mockito.any(CashAllocationDomain.class), "findPaymentLinesFromPaymentReferences", any(String[].class))
               .thenReturn(srgPaymentModels);

        // Call the public method under test
        List<PaymentLinesModel> result = cashAllocationDomain.getPaymentLinesFromPaymentReference(paymentReferences);

        // Basic assertion
        assertEquals(1, result.size());
        assertEquals(2, result.get(0).getNumberOfInvoices()); // Check the split

        // You can add more specific assertions if needed, but this covers the lines.
    }