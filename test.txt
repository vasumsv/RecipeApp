@Test
void insertPaymentLines_FeeDetailsException_CoversLines() {
    // 1. Setup payment data with ALL REQUIRED FIELDS
    PaymentLinesFeoModel paymentLine = new PaymentLinesFeoModel();
    paymentLine.setInvoiceReference("INV123");
    paymentLine.setAmount(new BigDecimal("1000.00"));
    paymentLine.setProviderId("PROV123");
    paymentLine.setEntityBdrId("123"); // Must match entity filter
    paymentLine.setFeeBarId("456"); // Critical for feeDetails call
    List<PaymentLinesFeoModel> finalData = Collections.singletonList(paymentLine);

    // 2. Mock invoices & BAPs to bypass amount validation
    InvoicePayableModel invoice = new InvoicePayableModel();
    invoice.setInvoiceReference("INV123");
    invoice.setAmount(new BigDecimal("1000.00")); // Exact match
    when(invoiceServiceApi.getListOfInvoices(anyList()))
        .thenReturn(List.of(invoice));

    BapPayableModel bap = new BapPayableModel();
    bap.setInvoiceReference("INV123");
    bap.setBapAmount(new BigDecimal("1000.00")); // Exact match
    when(invoiceServiceApi.getListOfBapDetailsForMultipleInvoices(anyList()))
        .thenReturn(List.of(bap));

    // 3. Mock provider details (avoid early exit)
    when(referentialServiceApi.getProviderDetails(eq("PROV123"), anyString()))
        .thenReturn(new ProviderDetails());

    // 4. Mock user details with EXACT FIELD NAME
    UserDetailsModel userDetails = new UserDetailsModel();
    userDetails.setCodgcphabbo("PABBO123"); // Case-sensitive field
    when(referentialServiceApi.getUserInitials("user1")).thenReturn(userDetails);

    // 5. Mock entity list with EXACT FILTER
    EntityListModel entity = new EntityListModel();
    entity.setBdrId(new BigInteger("123")); // Must match entityBdrId
    entity.setEntityCode("ENTITY_CODE"); // Required for backOffice call
    when(referentialServiceApi.getEntireListOfEntities()))
        .thenReturn(List.of(entity)); // Avoid empty list

    // 6. Mock backOfficeDetails to SUCCEED
    when(referentialServiceApi.getBackOfficeDetails(
        eq("ENTITY_CODE"), 
        eq("PABBO123")
    )).thenReturn(new BackOfficeDetails());

    // 7. FORCE EXCEPTION IN TARGET METHOD
    when(referentialServiceApi.getFeeDetails(
        eq(new BigInteger("456")) // Must match FeeBarId="456"
    )).thenThrow(new RuntimeException("Target Exception"));

    // 8. Execute
    InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(finalData, "user1");

    // 9. Verify EXACT LINES ARE COVERED
    assertEquals("WESSAGE", response.getStatus());
    assertTrue(response.getErrorMessage().contains("Target Exception"));
}