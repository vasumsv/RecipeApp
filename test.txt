 @Test
    void transferFile_CoversTargetLines() throws Exception {
        // 1. Access private method via reflection
        Method transferFileMethod = AbDomain.class.getDeclaredMethod(
            "transferFile", 
            LocalDate.class, 
            Collections.singletonList(CashAllocationModel.class).getClass().getComponentType()
        );
        transferFileMethod.setAccessible(true);

        // 2. Setup test data
        LocalDate date = LocalDate.now();
        CashAllocationModel model = new CashAllocationModel();
        model.setInvoiceMatched("INV001");

        // Mock Invoice
        Invoice invoice = Mockito.mock(Invoice.class);
        Mockito.when(invoice.getInvoicesAbList()).thenReturn(new ArrayList<>()); // Provide a non-null list

        // Set the mocked Invoice object into CashAllocationModel (if needed)
        // If your CashAllocationModel has a setInvoice(Invoice invoice) method then use this
        // model.setInvoice(invoice);

        // 3. Set private fields using correct names
        ReflectionTestUtils.setField(abDomain, "directoryName", "target/test-files");
        ReflectionTestUtils.setField(abDomain, "abFtrKey", "TESTKEY"); // Note exact field name

        // 4. Invoke private method
        String result = (String) transferFileMethod.invoke(
            abDomain, 
            date, 
            Collections.singletonList(model)
        );

        // 5. Verify results
        assertNotNull(result);
        assertTrue(result.contains("TESTKEY.ABA_PAID_INVOICES"));
    }