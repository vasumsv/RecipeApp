// Step 1: Ensure the invoice exists
@Given("I have a successfully created invoice")
public void iHaveASuccessfullyCreatedInvoice() throws IOException {
    // Explicitly trigger invoice creation if not already done
    if (responseEntity == null) {
        iSendRequestToInvoiceCreation(); // Reuse your existing creation method
        assertNotNull("Invoice creation failed - null response", responseEntity);
    }
    
    assertEquals("Unexpected status code", HttpStatus.OK, responseEntity.getStatusCode());
    originalInvoice = responseEntity.getBody();
    assertNotNull("Invoice body is null", originalInvoice);
    logger.info("Original invoice reference: {}", originalInvoice.getInvoiceReference());
}

// Step 2: Implement edit request
@When("I send a PUT request to edit the invoice")
public void iSendAPUTRequestToEditTheInvoice() {
    assertNotNull("Original invoice not created", originalInvoice);
    
    // Configure endpoint
    String editUrl = baseUrl2 + editInvoiceUrl.replace("{uuid}", originalInvoice.getInvoiceReference());
    
    // Prepare modified invoice
    InvoicePayableModel modifiedInvoice = originalInvoice.toBuilder()
        .amount(originalInvoice.getAmount() + 50.0)
        .description("Updated description")
        .build();

    // Create request entity
    HttpEntity<InvoicePayableModel> requestEntity = new HttpEntity<>(modifiedInvoice, header);
    
    // Execute request
    editResponseEntity = restTemplate.exchange(
        editUrl, 
        HttpMethod.PUT, 
        requestEntity, 
        InvoicePayableModel.class
    );
    
    logger.info("Edit response status: {}", editResponseEntity.getStatusCode());
}

// Step 3: Add validation
@Then("the edit response status code should be {int}")
public void validateEditStatusCode(int expectedStatus) {
    assertNotNull("Edit response is null", editResponseEntity);
    assertEquals(expectedStatus, editResponseEntity.getStatusCodeValue());
}

@Then("the response should contain updated invoice details")
public void validateUpdatedDetails() {
    InvoicePayableModel updatedInvoice = editResponseEntity.getBody();
    
    assertNotNull("Updated invoice is null", updatedInvoice);
    assertEquals("Updated description", updatedInvoice.getDescription());
    assertEquals(originalInvoice.getAmount() + 50.0, updatedInvoice.getAmount(), 0.001);
}