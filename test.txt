@Test
void insertPaymentLines_BackOfficeException_CoversTargetLines() {
    // Setup data with valid fields
    PaymentLinesForModel paymentLine = new PaymentLinesForModel();
    paymentLine.setInvoiceReference("INV123");
    paymentLine.setAmount(new BigDecimal("1000.00"));
    paymentLine.setProviderId("PROV123");
    paymentLine.setEntityBorderId("123"); // Must match entity border
    List<PaymentLinesForModel> finalData = Collections.singletonList(paymentLine);

    // Mock invoices & BAPs with NON-NULL values
    InvoicePayableModel invoice = new InvoicePayableModel();
    invoice.setInvoiceReference("INV123");
    invoice.setAmount(new BigDecimal("1000.00")); // Match paymentLine amount
    when(invoiceServiceApi.getListOfInvoices(anyList()))
        .thenReturn(Collections.singletonList(invoice));

    BapPayableModel bap = new BapPayableModel();
    bap.setInvoiceReference("INV123");
    bap.setBapAmount(new BigDecimal("1000.00")); // Match invoice amount
    when(invoiceServiceApi.getListOfBapDetailsForMultipleInvoices(anyList()))
        .thenReturn(Collections.singletonList(bap));

    // Mock provider and user details
    when(referentialServiceApi.getProviderDetails(anyString(), anyString()))
        .thenReturn(new ProviderDetails());

    UserDetailsModel userDetails = new UserDetailsModel();
    userDetails.setCodgrePabbo("PABBO123"); // Correct field name
    when(referentialServiceApi.getUserInitials(anyString())).thenReturn(userDetails);

    // Mock entity with CORRECT FIELD NAME (border)
    EntityListModel entity = new EntityListModel();
    entity.setBorder(new BigInteger("123")); // Correct field name
    when(referentialServiceApi.getEntityListOfEntities()) // Correct method name
        .thenReturn(Collections.singletonList(entity));

    // Force exception in target method
    when(referentialServiceApi.getBackOfficeDetails(anyString(), anyString())) // Correct method name
        .thenThrow(new RuntimeException("Test Exception"));

    // Execute
    InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(finalData, "user1");

    // Verify
    assertEquals("CRESSAEG", response.getStatus());
    assertTrue(response.getErrorMessage().contains("Test Exception"));
}