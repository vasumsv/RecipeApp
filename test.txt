@edit 
  Scenario: Edit existing invoice  
    Given I have a successfully created invoice  
    When I send a PUT request to edit the invoice  
    Then the edit response status code should be 200  
    And the response should contain updated invoice details


    private InvoicePayableModel originalInvoice;

@Given("I have a successfully created invoice")
public void iHaveASuccessfullyCreatedInvoice() {
    assertNotNull(responseEntity);
    assertNotNull(responseEntity.getBody());
    this.invoiceReference = responseEntity.getBody().getInvoiceReference();
    this.originalInvoice = responseEntity.getBody(); // Store original for comparison
    logger.info("Stored original invoice with reference: {}", invoiceReference);
}

@When("I send a PUT request to edit the invoice")
public void iSendPutRequestToEditInvoice() throws IOException {
    String url = baseUrl2 + "/invoices/" + invoiceReference;
    
    // Create edit payload from original invoice
    InvoicePayableModel editPayload = new InvoicePayableModel();
    
    // Copy all necessary fields from original
    BeanUtils.copyProperties(originalInvoice, editPayload); // Simple way to copy all fields
    
    // Make specific updates (modify as needed)
    editPayload.setInvoiceStatus("EDITED");
    editPayload.setSsStatus("UPDATED");
    editPayload.setAmount(new BigDecimal("500.00")); // Example update
    editPayload.setLastUpdateDate(LocalDate.now());
    editPayload.setLastUpdatedByUser("automation-user");
    
    HttpEntity<InvoicePayableModel> requestEntity = new HttpEntity<>(editPayload, headers);
    
    editResponseEntity = restTemplate.exchange(
        url,
        HttpMethod.PUT,
        requestEntity,
        InvoicePayableModel.class
    );
    
    logger.info("Edit invoice request completed with status: {}", 
        editResponseEntity.getStatusCode());
}

@Then("the edit response status code should be 200")
public void theEditResponseStatusCodeShouldBe200() {
    assertNotNull(editResponseEntity);
    assertEquals(200, editResponseEntity.getStatusCodeValue());
}

@Then("the response should contain updated invoice details")
public void theResponseShouldContainUpdatedInvoiceDetails() {
    InvoicePayableModel editedInvoice = editResponseEntity.getBody();
    
    // Verify unchanged fields
    assertEquals(originalInvoice.getId(), editedInvoice.getId());
    assertEquals(originalInvoice.getInvoiceReference(), editedInvoice.getInvoiceReference());
    
    // Verify updated fields
    assertEquals("EDITED", editedInvoice.getInvoiceStatus());
    assertEquals("UPDATED", editedInvoice.getSsStatus());
    assertEquals(new BigDecimal("500.00"), editedInvoice.getAmount());
    assertEquals(LocalDate.now(), editedInvoice.getLastUpdateDate());
    assertEquals("automation-user", editedInvoice.getLastUpdatedByUser());
    
    logger.info("All invoice updates verified successfully");
}