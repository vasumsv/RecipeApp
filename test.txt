@Test
void getMettedPaymentRows_PaymentModeException() {
    // Given: Create valid payment data to ensure aggregation occurs
    InvoicePayableModelForPayment payment = createBasePayment();
    payment.setAmount(new BigDecimal("1000.00")); // Ensure positive amount
    List<InvoicePayableModelForPayment> payments = Collections.singletonList(payment);

    // Mock ONLY the critical dependency with precise argument matchers
    when(referentialServiceApi.getPaymentModeAndSettlementLocation(
        eq(new BigInteger("PROV123")), // Exact providerId
        any(BigInteger.class),          // Entity (from payment.setEntity("ENTITY1"))
        any(BigInteger.class),          // Fee category (from payment.setFeeCategory("CAT1"))
        eq("S"),                        // Payment direction (amount > 0 â†’ "S")
        eq("USD")                       // Currency (from payment.setCurrency("USD"))
    )).thenThrow(new RuntimeException("Payment Mode Error"));

    // When: Execute the method
    List<PaymentLinesModel> result = cashAllocationDomain.getMettedPaymentRowsForManualPayment(
        payments, 
        "user1"
    );

    // Then: Validate the error handling
    assertFalse(result.isEmpty(), "Result should contain error response");
    assertTrue(
        result.get(0).getComment().contains("Payment Mode unavailable for provider PROV123 & currency USD"),
        "Error message should mention provider and currency"
    );
}