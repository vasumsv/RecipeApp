// ===== EDIT SCENARIO =====
private String createdInvoiceUuid;

@Given("I have a successfully created invoice")
public void storeCreatedInvoice() {
    // 1. Verify response entity exists
    if (responseEntity == null) {
        throw new IllegalStateException("Response entity is null - invoice creation failed");
    }
    
    // 2. Verify response body exists
    InvoicePayableModel createdInvoice = responseEntity.getBody();
    if (createdInvoice == null) {
        logger.error("Invoice creation response body is null. Status: {}", responseEntity.getStatusCode());
        logger.error("Response headers: {}", responseEntity.getHeaders());
        throw new IllegalStateException("Invoice creation response body is null");
    }
    
    // 3. Verify UUID exists
    if (createdInvoice.getId() == null) {
        logger.error("Created invoice has null UUID. Full response: {}", createdInvoice);
        throw new IllegalStateException("Created invoice has null UUID");
    }
    
    // Store references
    originalInvoice = createdInvoice;
    createdInvoiceUuid = createdInvoice.getId().toString();
    
    logger.info("Stored invoice with UUID: {}", createdInvoiceUuid);
    logger.debug("Full invoice details: {}", createdInvoice);
}

@When("I send a PUT request to edit the invoice")
public void editInvoice() {
    try {
        // Verify we have a UUID
        if (createdInvoiceUuid == null) {
            throw new IllegalStateException("No invoice UUID available for editing");
        }
        
        String editUrl = baseUrl2 + "/invoices/" + createdInvoiceUuid;
        logger.info("Attempting to edit invoice at: {}", editUrl);
        
        // ... rest of the edit implementation ...
    } catch (Exception e) {
        logger.error("Failed to edit invoice: {}", e.getMessage());
        throw e;
    }
}





@Then("I should receive a successful invoice response")
public void verifyCreationResponse() {
    assertNotNull(responseEntity);
    logger.info("Response status: {}", responseEntity.getStatusCode());
    logger.info("Response headers: {}", responseEntity.getHeaders());
    
    assertNotNull(responseEntity.getBody(), 
        "Response body is null. Full response: " + responseEntity);
    
    assertNotNull(responseEntity.getBody().getId(),
        "Invoice UUID is null. Full response: " + responseEntity.getBody());
    
    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
}