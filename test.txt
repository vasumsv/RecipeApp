Scenario: Edit invoice
  Given I have a successfully created invoice
  When I send a PUT request to edit the invoice
  Then the response status code should be 200
  And the response should contain updated details
  And the temporary file is deleted




  package sg.cucumber.steps;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.When;
import io.cucumber.java.en.Then;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.*;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.springframework.core.io.FileSystemResource;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
import java.io.*;
import java.nio.file.*;
import java.util.UUID;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.yaml.snakeyaml.Yaml;
import java.util.Map;

@SpringBootTest
public class InvoiceForPayablesteps {
    private final Logger logger = LoggerFactory.getLogger(InvoiceForPayablesteps.class);
    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper mapper = new ObjectMapper();
    private String baseUrl2;
    private String registerEndpoint;
    private String editInvoiceUrl;
    private ResponseEntity<InvoicePayableModel> responseEntity;
    private ResponseEntity<InvoicePayableModel> editResponseEntity;
    private HttpHeaders headers;
    private String tempInvoiceFilePath; // Stores path to the temporary invoice file
    private InvoicePayableModel originalInvoice;
    private String id;

    public InvoiceForPayablesteps() throws IOException {
        String environmentType = System.getProperty("environment-type");
        try (InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("application-" + environmentType + ".yml")) {
            Map<String, Object> data = new Yaml().load(inputStream);
            Map<String, String> sgConfig = (Map<String, String>) data.get("sg");
            this.baseUrl2 = sgConfig.get("baseUrl2");
            this.registerEndpoint = sgConfig.get("register");
            this.editInvoiceUrl = sgConfig.get("edit");
        } catch (Exception e) {
            logger.error("Failed to load config", e);
        }
    }

    // --- Existing Steps for Invoice Creation ---
    @Given("I am an authorized user with the required permission to create invoice")
    public void setupAuthHeaders() {
        headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        // Add your token generation logic here (e.g., OAuth2)
    }

    @When("I send a request to create invoice")
    public void createInvoice() throws IOException {
        String url = baseUrl2 + registerEndpoint;
        String invoicePayableModelRequest = loadAndModifyJson("input/InvoicePayableModel.json");
        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("invoicePayableModelRequest", new HttpEntity<>(invoicePayableModelRequest, headers));
        body.add("file", new FileSystemResource("src/test/resources/files/sample.pdf"));
        responseEntity = restTemplate.postForEntity(url, new HttpEntity<>(body, headers), InvoicePayableModel.class);
    }

    @Then("I should receive a successful invoice response")
    public void verifyInvoiceCreation() throws IOException {
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        saveInvoiceToTempFile(responseEntity.getBody()); // Save to temp file for edit
    }

    // --- New Steps for Invoice Editing ---
    @Given("I have a successfully created invoice")
    public void loadCreatedInvoice() throws IOException {
        originalInvoice = mapper.readValue(new File(tempInvoiceFilePath), InvoicePayableModel.class);
        this.id = originalInvoice.getInvoiceReference();
    }

    @When("I send a PUT request to edit the invoice")
    public void editInvoice() {
        String url = baseUrl2 + editInvoiceUrl.replace("{uuid}", this.id);
        originalInvoice.setInvoiceStatus("EDITED"); // Modify a field
        editResponseEntity = restTemplate.exchange(
            url, 
            HttpMethod.PUT, 
            new HttpEntity<>(originalInvoice, headers), 
            InvoicePayableModel.class
        );
    }

    @Then("the edit response status code should be {int}")
    public void verifyEditStatusCode(int statusCode) {
        assertEquals(statusCode, editResponseEntity.getStatusCodeValue());
    }

    @Then("the response should contain updated invoice details")
    public void verifyUpdatedDetails() {
        InvoicePayableModel editedInvoice = editResponseEntity.getBody();
        assertEquals("EDITED", editedInvoice.getInvoiceStatus());
    }

    @Then("the temporary invoice file is deleted")
    public void cleanupTempFile() throws IOException {
        Files.deleteIfExists(Paths.get(tempInvoiceFilePath));
        logger.info("Temporary file deleted: {}", tempInvoiceFilePath);
    }

    // --- Helper Methods ---
    private String loadAndModifyJson(String filePath) throws IOException {
        InputStream inputStream = getClass().getClassLoader().getResourceAsStream(filePath);
        String json = new String(inputStream.readAllBytes(), StandardCharsets.UTF_8);
        return json.replace("{provider_reference}", UUID.randomUUID().toString());
    }

    private void saveInvoiceToTempFile(InvoicePayableModel invoice) throws IOException {
        String fileName = "temp_invoice_" + invoice.getInvoiceReference() + ".json";
        Path path = Paths.get("target/temp/" + fileName);
        Files.createDirectories(path.getParent());
        mapper.writeValue(path.toFile(), invoice);
        this.tempInvoiceFilePath = path.toString();
    }
}