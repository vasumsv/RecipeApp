@BeforeEach
    void setup() {
        // Set invoiceRefPattern value
        ReflectionTestUtils.setField(cashAllocationDomain, "invoiceRefPattern", "REF\\d{3}");
    }

    @Test
    void getNettedPaymentRowsForManualPayment_CoversAllLines() {
        // Setup input data
        InvoicePayableModelForPayment payment = new InvoicePayableModelForPayment();
        payment.setProviderId("PROV123");
        payment.setInvoiceReference("REF123"); // Matches invoiceRefPattern
        payment.setFeederCategory("CAT1");
        List<InvoicePayableModelForPayment> paymentList = Collections.singletonList(payment);

        // Mock dependencies
        BapPayableModel bap = new BapPayableModel();
        bap.setPortfolio("PORTFOLIO1");
        when(invoiceServiceApi.getListOfBapDetailsForMultipleInvoices(any()))
            .thenReturn(Collections.singletonList(bap));

        PortfolioAdvanceDetailResponse portfolioDetails = new PortfolioAdvanceDetailResponse();
        portfolioDetails.setCodTrs("BDR123");
        when(referentialServiceApi.getPortfolioDetailsBasedOnMnemonic("PORTFOLIO1"))
            .thenReturn(portfolioDetails);

        SettlementsAccounts settlementAccount = new SettlementsAccounts();
        settlementAccount.setNumbertrg1("ACC123");
        when(referentialServiceApi.getSettlementsAccounts(anyString(), anyString(), anyString()))
            .thenReturn(Collections.singletonList(settlementAccount));

        PaymentDate paymentDates = new PaymentDate();
        paymentDates.setValueDate("2023-10-01");
        paymentDates.setSendingDate("2023-10-02");
        when(referentialServiceApi.getPaymentDates(anyString(), anyString(), anyString(), anyString(), anyString(), anyString()))
            .thenReturn(paymentDates);

        // Execute method
        List<PaymentLinesModel> result = cashAllocationDomain
            .getNettedPaymentRowsForManualPayment(paymentList, "user1");

        // Verify output
        assertFalse(result.isEmpty());
        PaymentLinesModel model = result.get(0);
        assertEquals("PROV123", model.getProviderId());
        assertEquals("2023-10-01", model.getValueDate());
        assertEquals(1, model.getNumberOfSSI());
        assertNotNull(model.getSsiAccountCode());
    }