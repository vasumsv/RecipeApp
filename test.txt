@Test
    void getNettedPaymentRowsForManualPayment_dirtyCoverage() {
        List<InvoicePayableModel> invoicePayableList = new ArrayList<>();
        InvoicePayableModel invoice1 = new InvoicePayableModel();
        invoice1.setCurrency("USD");
        invoice1.setInvoiceReference("INV123");
        invoice1.setProviderId("PID1");
        invoice1.setFeeCategory("FCAT");
        invoice1.setAmount(BigDecimal.valueOf(100.00));
        invoicePayableList.add(invoice1);

        List<PaymentList> paymentList = new ArrayList<>();
        PaymentList payment = new PaymentList();
        payment.setProviderId("PID1");
        payment.setProviderMemo("Memo1");
        payment.setDates("2023-10-27");
        paymentList.add(payment);

        String user = "testUser";

        // Mocking for line coverage
        when(invoiceServiceApi.getStoreAppReadAllMultipleInvoices(anyList())).thenReturn(new ArrayList<>());

        PortfolioDetailsResponse portfolioDetailsResponse = new PortfolioDetailsResponse();
        portfolioDetailsResponse.setPortfolioDetails("port1;port2");
        when(referentialServiceApi.getPortfolioDetailsBasedOnnemonic(anyString())).thenReturn(portfolioDetailsResponse);

        List<SettlementAccountsResponse> settlementAccountsResponses = new ArrayList<>();
        SettlementAccountsResponse settlementAccount = new SettlementAccountsResponse();
        settlementAccount.setAccountCode("AC123");
        settlementAccountsResponses.add(settlementAccount);
        when(referentialServiceApi.getSettlementAccounts(anyString(), anyString())).thenReturn(settlementAccountsResponses);

        List<PaymentLinesModel> result = cashAllocationDomain.getNettedPaymentRowsForManualPayment(invoicePayableList, paymentList, user);

        assertNotNull(result);
        assertTrue(result.size() > 0); // Check for results
    }