Scenario: Edit existing invoice with field updates
    Given I have a successfully created invoice
    When I send a PUT request to edit the invoice with updated details
    Then the edit response should contain these validations


    private InvoicePayableModel originalInvoice; // To store the pre-edit state

@Given("I have a successfully created invoice")
public void iHaveASuccessfullyCreatedInvoice() {
    assertNotNull(responseEntity);
    assertNotNull(responseEntity.getBody());
    this.invoiceReference = responseEntity.getBody().getInvoiceReference();
    this.originalInvoice = responseEntity.getBody(); // Store original for comparison
    logger.info("Original invoice created with reference: {}", invoiceReference);
}

@When("I send a PUT request to edit the invoice with updated details")
public void iSendPutRequestToEditInvoiceWithUpdatedDetails() throws IOException {
    String url = baseUrl2 + "/invoices/" + invoiceReference;
    
    // Create edit payload from original invoice
    InvoicePayableModel editPayload = new InvoicePayableModel();
    
    // Copy all fields from original
    editPayload.setId(originalInvoice.getId());
    editPayload.setInvoiceReference(originalInvoice.getInvoiceReference());
    editPayload.setSgEntity(originalInvoice.getSgEntity());
    // ... copy all other fields ...
    
    // Make specific updates (example fields - adjust as needed)
    editPayload.setInvoiceStatus("APPROVED");
    editPayload.setSsStatus("PROCESSED");
    editPayload.setAmount(new BigDecimal("999.99")); // Example amount update
    editPayload.setLastUpdateDate(LocalDate.now());
    editPayload.setLastUpdatedByUser("test-automation");
    
    HttpEntity<InvoicePayableModel> requestEntity = new HttpEntity<>(editPayload, headers);
    
    editResponseEntity = restTemplate.exchange(
        url,
        HttpMethod.PUT,
        requestEntity,
        InvoicePayableModel.class
    );
    
    logger.info("Invoice edit request completed with status: {}", 
        editResponseEntity.getStatusCode());
}

@Then("the edit response should contain these validations")
public void validateEditResponse() {
    InvoicePayableModel editedInvoice = editResponseEntity.getBody();
    
    // Basic response validation
    assertNotNull(editedInvoice);
    assertEquals(HttpStatus.OK, editResponseEntity.getStatusCode());
    
    // Verify unchanged fields remain the same
    assertEquals(originalInvoice.getId(), editedInvoice.getId());
    assertEquals(originalInvoice.getInvoiceReference(), editedInvoice.getInvoiceReference());
    assertEquals(originalInvoice.getSgEntity(), editedInvoice.getSgEntity());
    
    // Verify updated fields
    assertEquals("APPROVED", editedInvoice.getInvoiceStatus());
    assertEquals("PROCESSED", editedInvoice.getSsStatus());
    assertEquals(new BigDecimal("999.99"), editedInvoice.getAmount());
    assertEquals(LocalDate.now(), editedInvoice.getLastUpdateDate());
    assertEquals("test-automation", editedInvoice.getLastUpdatedByUser());
    
    logger.info("All edit validations passed for invoice: {}", invoiceReference);
}