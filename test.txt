@Test
void insertPaymentLines_BackOfficeException_CoversTargetLines() {
    // 1. Setup payment data with valid fields
    PaymentLinesForModel paymentLine = new PaymentLinesForModel();
    paymentLine.setInvoiceReference("INV123");
    paymentLine.setAmount(new BigDecimal("1000.00"));
    paymentLine.setProviderId("PROV123");
    paymentLine.setEntityBenId("123"); // Must match entity filter
    List<PaymentLinesForModel> finalData = Collections.singletonList(paymentLine);

    // 2. Mock invoices & BAPs to pass amount validation
    InvoicePayableModel invoice = new InvoicePayableModel();
    invoice.setInvoiceReference("INV123");
    invoice.setAmount(new BigDecimal("1000.00"));
    when(invoiceServiceApi.getListOfInvoices(anyList()))
        .thenReturn(Collections.singletonList(invoice));

    BapPayableModel bap = new BapPayableModel();
    bap.setInvoiceReference("INV123");
    bap.setBapAmount(new BigDecimal("1000.00"));
    when(invoiceServiceApi.getListOfBapDetailsForMultipleInvoices(anyList()))
        .thenReturn(Collections.singletonList(bap));

    // 3. Mock provider details to avoid early exit
    when(referentialServiceApi.getProviderDetails(anyString(), anyString()))
        .thenReturn(new ProviderDetails());

    // 4. Mock user details with required field
    UserDetailsModel userDetails = new UserDetailsModel();
    userDetails.setCodgcpRabbo("PABBO123"); // Critical for backoffice call
    when(referentialServiceApi.getUserDetails(anyString())).thenReturn(userDetails);

    // 5. Mock entity list with matching BenId
    EntityListModel entity = new EntityListModel();
    entity.setBenId(new BigInteger("123")); // Match paymentLine.entityBenId
    entity.setEntityCode("ENTITY_CODE");
    when(referentialServiceApi.getEntityListOfEntities())
        .thenReturn(Collections.singletonList(entity));

    // 6. Force exception in getBackOfficeDetails
    when(referentialServiceApi.getBackOfficeDetails(
        eq("ENTITY_CODE"), 
        eq("PABBO123") // Matches userDetails.getCodgcpRabbo()
    )).thenThrow(new RuntimeException("Test Exception"));

    // 7. Execute
    InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(finalData, "user1");

    // 8. Verify lines 1192-1199 are covered
    assertEquals("RESSAGE", response.getStatus());
    assertTrue(response.getErrorMessage().contains("Test Exception"));
}