    private InvoicePayableModelForPayment createValidPayment() {
        InvoicePayableModelForPayment payment = new InvoicePayableModelForPayment();
        payment.setInvoiceType("APPROVED");
        payment.setProviderId("PROV123");
        payment.setInvoiceReference("REF12345");
        payment.setCurrency("USD");
        payment.setFeederCategory("CAT1");
        payment.setEntity("ENTITY1");

        InvoicePayable invoicePayable = new InvoicePayable();
        invoicePayable.setProviderMnemo("BROKER1");
        invoicePayable.setPaymentMethod("MANUAL");
        invoicePayable.setRedCode("RED123");
        payment.setInvoicePayable(invoicePayable);
        payment.setAmount(BigDecimal.valueOf(100.00));
        
        return payment;
    }

    @Test
    void getMettedRows_SuccessPath() {
        // Given
        InvoicePayableModelForPayment payment = createValidPayment();
        List<InvoicePayableModelForPayment> paymentList = Collections.singletonList(payment);

        PaymentModeAndLocationModel paymentMode = new PaymentModeAndLocationModel();
        paymentMode.setPaymentMode("SWIFT");
        when(referentialServiceApi.getPaymentModeAndSettlementLocation(
            any(BigInteger.class), any(BigInteger.class), any(BigInteger.class), 
            anyString(), anyString()
        )).thenReturn(paymentMode);

        PaymentDates dates = new PaymentDates();
        dates.setValueDate(LocalDate.parse("2023-10-01"));
        dates.setSendingDate(LocalDate.parse("2023-10-02"));
        when(referentialServiceApi.getPaymentDates(
            anyString(), anyString(), anyString(), anyString(), anyString(), anyString()
        )).thenReturn(dates);

        when(referentialServiceApi.getSettlementDetails(
            anyString(), anyString(), anyString(), anyString()
        )).thenReturn(Arrays.asList("ACC123", "ACC456"));

        // When
        List<PaymentLinesModel> result = cashAllocationDomain.getMettedRows(paymentList, "user1");

        // Then
        assertFalse(result.isEmpty());
        verify(referentialServiceApi).getPaymentModeAndSettlementLocation(any(), any(), any(), any(), any());
    }

    @Test
    void getMettedRows_ExceptionInPaymentMode() {
        // Given
        InvoicePayableModelForPayment payment = createValidPayment();
        payment.setProviderId("123"); // Triggers exception
        List<InvoicePayableModelForPayment> paymentList = Collections.singletonList(payment);

        when(referentialServiceApi.getPaymentModeAndSettlementLocation(
            eq(new BigInteger("123")), any(), any(), anyString(), anyString()
        )).thenThrow(new RuntimeException("Mocked exception"));

        // When
        List<PaymentLinesModel> result = cashAllocationDomain.getMettedRows(paymentList, "user1");

        // Then
        assertNotNull(result.get(0).getComment());
    }

    @Test
    void getMettedRows_ExceptionInPaymentDates() {
        // Given
        InvoicePayableModelForPayment payment = createValidPayment();
        payment.setEntity("ENTITY2"); // Triggers exception
        List<InvoicePayableModelForPayment> paymentList = Collections.singletonList(payment);

        when(referentialServiceApi.getPaymentDates(
            eq("ENTITY2"), any(), any(), any(), any(), any()
        )).thenThrow(new RuntimeException("Mocked exception"));

        // When
        List<PaymentLinesModel> result = cashAllocationDomain.getMettedRows(paymentList, "user1");

        // Then
        assertNotNull(result.get(0).getComment());
    }