Feature: Invoice Management - Edit Invoice
  As an API user
  I want to modify existing invoices
  So I can keep invoice records up-to-date

  Background:
    Given the API is configured for "<environment>"
    
  @Positive
  Scenario: Successfully edit invoice with valid UUID and credentials
    Given I have valid invoice edit request payload for UUID "550e8400-e29b-41d4-a716-446655440000"
    And I have a valid authorization token
    When I send a PUT request to edit invoice
    Then the edit response status code should be 200
    And the response should contain updated invoice details

  @Security
  Scenario: Attempt invoice edit with invalid token
    Given I have valid invoice edit request payload for UUID "550e8400-e29b-41d4-a716-446655440000"
    And I have an invalid authorization token
    When I send a PUT request to edit invoice
    Then the edit response status code should be 401
    And the response should contain "Unauthorized" error message

  @Validation
  Scenario Outline: Attempt edit with invalid UUID
    Given I have valid invoice edit request payload for UUID "<invalid_uuid>"
    And I have a valid authorization token
    When I send a PUT request to edit invoice
    Then the edit response status code should be <expected_status>
    
    Examples:
      | invalid_uuid                              | expected_status |
      | invalid-uuid-123                          | 400             |
      | 00000000-0000-0000-0000-000000000000     | 404             |
      |                                           | 400             |

  @EdgeCase
  Scenario: Attempt edit without required fields
    Given I have invalid invoice edit payload missing required fields
    And I have a valid authorization token
    When I send a PUT request to edit invoice
    Then the edit response status code should be 422
    And the response should list validation errors for "<fields>"







    public class InvoiceSteps {
    private Response response;
    private String token;
    private String baseUrl;
    private String editInvoiceUrl; 
    private Object payload;

    @Before
    public void setup() {
        // Load configurations from YAML (similar to InvoicePIBSteps)
        String environmentType = System.getProperty("environment-type");
        Yaml yaml = new Yaml();
        
        try (InputStream inputStream = this.getClass().getClassLoader()
            .getResourceAsStream("application-" + environmentType + ".yaml")) {
            
            Map<String, Object> data = yaml.load(inputStream);
            Map<String, String> endpoints = (Map<String, String>) data.get("endpoints");
            
            this.baseUrl = endpoints.get("baseUrl");
            this.editInvoiceUrl = endpoints.get("editInvoiceUrl");
            
            RestAssured.baseURI = this.baseUrl;
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Given("I have valid invoice edit request payload for UUID {string}")
    public void loadValidEditPayload(String uuid) throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        try (InputStream is = this.getClass().getClassLoader()
            .getResourceAsStream("input/invoiceEditPayload.json")) {
            
            this.payload = mapper.readValue(is, Object.class);
            // Store UUID in test context if needed
            TestContext.invoiceUUID = uuid; 
        }
    }

    @When("I send a PUT request to edit invoice")
    public void sendEditRequest() {
        response = given()
            .header("Authorization", "Bearer " + token)
            .contentType(ContentType.JSON)
            .pathParam("uuid", TestContext.invoiceUUID)
            .body(payload)
            .when()
            .put(this.editInvoiceUrl);
    }

    @Then("the edit response status code should be {int}")
    public void verifyEditStatusCode(int expectedStatusCode) {
        assertEquals(expectedStatusCode, response.getStatusCode());
    }

    @Then("the response should contain updated invoice details")
    public void verifyUpdatedDetails() {
        JsonPath jsonPath = response.jsonPath();
        assertNotNull(jsonPath.get("updatedTimestamp"));
        assertEquals("UPDATED", jsonPath.get("status"));
    }

    @Given("I have an invalid authorization token")
    public void setInvalidToken() {
        this.token = "invalid_token_123";
    }

    @Given("I use an invalid UUID {string}")
    public void setInvalidUUID(String invalidUUID) {
        TestContext.invoiceUUID = invalidUUID;
    }
}