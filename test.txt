 @Test
    void getNettedPaymentRowsForManualPayment_mapPopulationAndIteration() {
        // Create InvoicePayableModel instances with necessary data
        List<InvoicePayableModel> invoicePayableList = new ArrayList<>();
        InvoicePayableModel invoice1 = new InvoicePayableModel();
        invoice1.setCurrency("USD");
        invoice1.setInvoiceReference("INV123");
        invoice1.setAmount(BigDecimal.valueOf(100.00)); // Set amount
        invoicePayableList.add(invoice1);

        InvoicePayableModel invoice2 = new InvoicePayableModel();
        invoice2.setCurrency("EUR");
        invoice2.setInvoiceReference("INV456");
        invoice2.setAmount(BigDecimal.valueOf(200.00)); // Set amount
        invoicePayableList.add(invoice2);

        // Create PaymentList instances (if needed for the method)
        List<PaymentList> paymentList = new ArrayList<>();
        PaymentList payment = new PaymentList();
        payment.setProviderId("PID1");
        payment.setProviderMemo("Memo1");
        payment.setDates("2023-10-27");
        paymentList.add(payment);

        String user = "testUser";

        // Mock the service calls based on your method's logic
        when(invoiceServiceApi.getStoreAppReadAllMultipleInvoices(anyList())).thenReturn(new ArrayList<>());
        when(referentialServiceApi.getPortfolioDetailsBasedOnnemonic(anyString())).thenReturn(new PortfolioDetailsResponse());
        when(referentialServiceApi.getSettlementAccounts(anyString(), anyString())).thenReturn(new ArrayList<>());

        // Call the method under test
        List<PaymentLinesModel> result = cashAllocationDomain.getNettedPaymentRowsForManualPayment(invoicePayableList, paymentList, user);

        // Assertions based on the expected behavior of the method
        assertNotNull(result);
        assertFalse(result.isEmpty());

        // Add more specific assertions based on your method's logic
        // Example:
        // assertEquals(expectedSize, result.size());
        // assertEquals(expectedValue, result.get(0).getProperty());
    }