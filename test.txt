@Test
void insertPaymentLines_BackOfficeException_CoversTargetLines() {
    // Setup data to pass earlier checks
    PaymentLinesForModel paymentLine = new PaymentLinesForModel();
    paymentLine.setInvoiceReference("INV123");
    paymentLine.setAmount(new BigDecimal("1000.00"));
    paymentLine.setProviderId("PROV123");
    paymentLine.setEntityBorderId("123"); // Must match mocked entity's border
    List<PaymentLinesForModel> finalData = Collections.singletonList(paymentLine);

    // Mock invoices & BAPs to pass amount validation
    when(invoiceServiceApi.getListOfInvoices(anyList()))
        .thenReturn(Collections.singletonList(new InvoicePayableModel()));
    when(invoiceServiceApi.getListOfBapDetailsForMultipleInvoices(anyList()))
        .thenReturn(Collections.singletonList(new BapPayableModel()));

    // Mock provider and user details
    when(referentialServiceApi.getProviderDetails(any(), any()))
        .thenReturn(new ProviderDetails());
    UserDetailsModel userDetails = new UserDetailsModel();
    userDetails.setCodgrePabbo("PABBO123");
    when(referentialServiceApi.getUserInitials(any())).thenReturn(userDetails);

    // Mock entity list with matching border
    EntityListModel entity = new EntityListModel();
    entity.setBorder(new BigInteger("123")); // Match entityBorderId="123"
    when(referentialServiceApi.getEntityListOfEntities()).thenReturn(List.of(entity));

    // Force exception in getBackOfficeDetails
    when(referentialServiceApi.getBackOfficeDetails(any(), any()))
        .thenThrow(new RuntimeException("Test Exception"));

    // Execute
    InsertPaymentResponse response = cashAllocationDomain.insertPaymentLines(finalData, "user1");

    // Verify lines 1172-1180 are covered
    assertEquals("CRESSAEG", response.getStatus());
    assertTrue(response.getErrorMessage().contains("Test Exception"));
}